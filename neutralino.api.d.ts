/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/__nativeMethod_app.exit": {
    /**
     * Terminates the running application.
     *
     * ```js
     * await Neutralino.app.exit();
     * ```
     *
     * ```js
     * await Neutralino.app.exit(130);
     * ```
     */
    post: operations["Neutralino.app.exit"];
  };
  "/__nativeMethod_app.getConfig": {
    /**
     * Returns the current application configuration as a JSON object.
     *
     * ```js
     * Neutralino.app.getConfig ()
     * ```
     */
    get: operations["Neutralino.app.getConfig"];
  };
  "/__nativeMethod_app.keepAlive": {
    /**
     * The keepAlive method is responsible for saving the Neutralinojs server instance from the automatic termination.
     * This method is called automatically from the client library for the browser mode.
     *
     * ```js
     * Neutralino.app.keepAlive();
     * ```
     */
    get: operations["Neutralino.app.keepAlive"];
  };
  "/__nativeMethod_app.killProcess": {
    /**
     * Kills the application process.
     * If the application becomes unresponsive, you can use this to terminate the process instantly.
     * However, we recommend you to use the `exit()` method to close your application properly.
     *
     * ```js
     * await Neutralino.app.killProcess();
     * ```
     */
    get: operations["Neutralino.app.killProcess"];
  };
  "/__nativeMethod_computer.getMemoryInfo": {
    /**
     * Provides physical memory details (in megabytes).
     *
     * ```js
     * let ramInfo = await Neutralino.computer.getRamUsage();
     * console.log(`Your ram size: ${Math.round(ramInfo.total / 1000000)}GB`);
     * ```
     */
    get: operations["Neutralino.computer.getMemoryInfo"];
  };
  "/__nativeMethod_debug.log": {
    /**
     * Writes messages to `neutralino.log` file.
     *
     * :::tip
     * If your application is running via `neu run` or `neu listen`, you can see log
     * messages on your terminal.
     * :::
     *
     * ```js
     * await Neutralino.debug.log({
     *   type: 'INFO',
     *   message: 'Test message'
     * });
     * ```
     */
    post: operations["Neutralino.debug.log"];
  };
  "/__nativeMethod_filesystem.createDirectory": {
    /**
     * Creates a new directory.
     *
     * ```js
     * await Neutralino.filesystem.createDirectory({
     *   path: './newDirectory',
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.createDirectory"];
  };
  "/__nativeMethod_filesystem.removeDirectory": {
    /**
     * Removes given directories.
     *
     * ```js
     * await Neutralino.filesystem.removeDirectory({
     *   path: './tmpDirectory',
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.removeDirectory"];
  };
  "/__nativeMethod_filesystem.writeFile": {
    /**
     * Writes new text files with data.
     *
     * ```js
     * await Neutralino.filesystem.writeFile({
     *   fileName: './myFile.txt',
     *   data: 'Sample content'
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.writeFile"];
  };
  "/__nativeMethod_filesystem.writeBinaryFile": {
    /**
     * Writes new binary files with data.
     *
     * ```js
     * let rawBin = new ArrayBuffer(1);
     * let view = new Uint8Array(rawBin);
     * view[0] = 64; // Saves ASCII '@' to the binary file
     * await Neutralino.filesystem.writeBinaryFile({
     *   fileName: './myFile.bin',
     *   data: rawBin
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.writeBinaryFile"];
  };
  "/__nativeMethod_filesystem.readFile": {
    /**
     * Reads text files.
     *
     * ```js
     * let response = await Neutralino.filesystem.readFile({
     *   fileName: './myFile.txt'
     * });
     * console.log(`Content: ${response.data}`);
     * ```
     */
    post: operations["Neutralino.filesystem.readFile"];
  };
  "/__nativeMethod_filesystem.readBinaryFile": {
    /**
     * Reads binary files.
     *
     * ```js
     * let response = await Neutralino.filesystem.readBinaryFile({
     *   fileName: './myFile.bin'
     * });
     * let view = new Uint8Array(response.data);
     * console.log('Binary content: ', view);
     * ```
     */
    post: operations["Neutralino.filesystem.readBinaryFile"];
  };
  "/__nativeMethod_filesystem.removeFile": {
    /**
     * Removes given file.
     *
     * ```js
     * await Neutralino.filesystem.removeFile({
     *   fileName: './myFile.txt'
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.removeFile"];
  };
  "/__nativeMethod_filesystem.readDirectory": {
    /**
     * Reads a whole directory.
     *
     * ```js
     * let response = await Neutralino.filesystem.readDirectory({
     *   path: NL_PATH
     * });
     * console.log('Content: ', response.entries);
     * ```
     */
    post: operations["Neutralino.filesystem.readDirectory"];
  };
  "/__nativeMethod_filesystem.copyFile": {
    /**
     * Copies a file to a new destination.
     *
     * ```js
     * await Neutralino.filesystem.copyFile({
     *   source: './source.txt',
     *   destination: './destination.txt'
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.copyFile"];
  };
  "/__nativeMethod_filesystem.moveFile": {
    /**
     * Moves a file to a new destination.
     *
     * ```js
     * await Neutralino.filesystem.moveFile({
     *   source: './source.txt',
     *   destination: './destination.txt'
     * });
     * ```
     */
    post: operations["Neutralino.filesystem.moveFile"];
  };
  "/__nativeMethod_filesystem.getStats": {
    /**
     * Returns file statistics for the given path. If the given path doesn't exist or is unable to access,
     * the awaited method will throw an error. Therefore, you can use this method to check the existance of a file or directory.
     *
     * ```js
     * let response = await Neutralino.filesystem.getStats({
     *   path: './sampleVideo.mp4'
     * });
     * console.log('Stats:', response);
     * ```
     */
    post: operations["Neutralino.filesystem.getStats"];
  };
  "/__nativeMethod_os.execCommand": {
    /**
     * Executes a command and returns the output.
     *
     * ```js
     * Neutralino.os.execCommand ({
     *   command: 'python --version'
     * })
     * ```
     */
    post: operations["Neutralino.os.execCommand"];
  };
  "/__nativeMethod_os.getEnvar": {
    /**
     * Provides the value of a given environment variable.
     *
     * ```js
     * Neutralino.os.getEnvar('USER')
     *   .then (response => `USER = ${response.value}`);
     * ```
     */
    post: operations["Neutralino.os.getEnvar"];
  };
  "/__nativeMethod_os.showOpenDialog": {
    /**
     * Shows the file open dialog.
     *
     * ```js
     * let response = await Neutralino.os.showDialogOpen({
     *   title: 'Select a folder',
     *   isDirectoryMode: true
     * });
     * console.log(`You've selected: ${response.selectedEntry}`);
     * ```
     */
    post: operations["Neutralino.os.showOpenDialog"];
  };
  "/__nativeMethod_os.showSaveDialog": {
    /**
     * Shows the file save dialog.
     *
     * ```js
     * let response = await Neutralino.os.showSaveDialog({
     *   title: 'Save to a file'
     * });
     * console.log(`You've selected: ${response.selectedEntry}`);
     * ```
     */
    post: operations["Neutralino.os.showSaveDialog"];
  };
  "/__nativeMethod_os.showNotification": {
    /**
     * Displays a notification message.
     * ```js
     * await Neutralino.os.showNotification({
     *   summary: 'Hello world',
     *   body: 'It works!. Have a nice day'
     * });
     * ```
     */
    post: operations["Neutralino.os.showNotification"];
  };
  "/__nativeMethod_os.showMessageBox": {
    /** Displays a message box. */
    post: operations["Neutralino.os.showMessageBox"];
  };
  "/__nativeMethod_os.setTray": {
    /**
     * Creates/updates the tray icon and menu.
     * ```js
     * let tray = {
     *   icon: '/resources/icons/trayIcon.png',
     *   menuItems: [
     *     {id: "about", text: "About"},
     *     {text: "-"},
     *     {id: "quit", text: "Quit"}
     *   ]
     * };
     * await Neutralino.os.setTray(tray);
     * ```
     */
    post: operations["Neutralino.os.setTray"];
  };
  "/__nativeMethod_os.open": {
    /**
     * Opens a URL with the default web browser.
     * :::tip If your application is running on the default web browser, this method will open a new tab. :::
     */
    post: operations["open"];
  };
  "/__nativeMethod_storage.setData": {
    /**
     * Writes data into Neutralinojs shared storage.
     *
     * ```js
     * await Neutralino.storage.putData({
     *   bucket: 'userDetails',
     *   data: JSON.stringify({
     *     username: 'TestValue'
     *   })
     * });
     * ```
     */
    post: operations["Neutralino.storage.setData"];
  };
  "/__nativeMethod_storage.getData": {
    /**
     * Reads and returns data for a given Neutralinojs shared storage key.
     * ```js
     * let response = await Neutralino.storage.getData({
     *   bucket: 'userDetails'
     * });
     * console.log(`Data: ${response.data}`);
     * ```
     */
    post: operations["Neutralino.storage.getData"];
  };
  "/__nativeMethod_window.setTitle": {
    /**
     * Sets the title of the native window.
     *
     * ```js
     * Neutralino.window.setTitle ('My window')
     * ```
     */
    post: operations["Neutrlino.window.setTitle"];
  };
  "/__nativeMethod_window.setSize": {
    /**
     * Resize the native window. \
     * This feature is suitable to make custom window bars along with the [borderless mode](https://neutralino.js.org/docs/configuration/neutralino.config.json#modeswindowborderless-boolean).
     *
     * This method always expects width and height couples. \
     * For example, if you are sending `minWidth`, you should send `minHeight` too.
     * ```js
     * Neutralino.window.setSize({
     *     width: 500,
     *     height: 200,
     *     maxWidth: 600,
     *     maxHeight: 400
     * });
     * ```
     *
     * ```js
     * Neutralino.window.setSize({
     *     resizable: false
     * });
     * ```
     */
    post: operations["neutralino_window_post_size"];
  };
  "/__nativeMethod_window.setIcon": {
    /** Sets an icon for the native window or Dock. */
    post: operations["Neutralino.window.setIcon"];
  };
  "/__nativeMethod_window.focus": {
    /** Focuses the native window. */
    get: operations["Neutralino.window.focus"];
  };
  "/__nativeMethod_window.hide": {
    /** Hides the native window. */
    get: operations["Neutralino.window.hide"];
  };
  "/__nativeMethod_window.isVisible": {
    /** Returns true if the native window is visible. */
    get: operations["Neutralino.window.isVisible"];
  };
  "/__nativeMethod_window.show": {
    /** Shows the native window. */
    get: operations["Neutralino.window.show"];
  };
  "/__nativeMethod_window.minimize": {
    /** Minimizes the native window. */
    get: operations["Neutralino.window.minimize"];
  };
  "/__nativeMethod_window.maximize": {
    /** Maximizes the native window. */
    get: operations["Neutralino.window.maximize"];
  };
  "/__nativeMethod_window.isMaximized": {
    /** Returns true if the native window is maximized. */
    get: operations["Neutralino.window.isMaximized"];
  };
  "/__nativeMethod_window.unmaximize": {
    /** Restores the native window. */
    get: operations["Neutralino.window.unmaximize"];
  };
  "/__nativeMethod_window.setFullScreen": {
    /** Enables the full screen mode. */
    get: operations["Neutralino.window.setFullScreen"];
  };
  "/__nativeMethod_window.isFullScreen": {
    /** Returns true if the native window is in the full screen mode. */
    get: operations["Neutralino.window.isFullScreen"];
  };
  "/__nativeMethod_window.exitFullScreen": {
    /** Exits from the full screen mode. */
    get: operations["Neutralino.window.exitFullScreen"];
  };
  "/__nativeMethod_window.move": {
    /**
     * Moves the native window into given coordinates. \
     * Neutralinojs's cross-platform coordinate system starts from top-left corner of the screen.
     * In other words, `x=0,y=0` point refers to the top-left corner of the device's main screen.
     */
    post: operations["Neutralino.window.move"];
  };
}

export interface components {
  schemas: {};
  responses: {};
  requestBodies: {};
}

export interface operations {
  /**
   * Terminates the running application.
   *
   * ```js
   * await Neutralino.app.exit();
   * ```
   *
   * ```js
   * await Neutralino.app.exit(130);
   * ```
   */
  "Neutralino.app.exit": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** An integer value for the process's exit code. The default value is always `0` (success). */
          exitCode?: number;
        };
      };
    };
  };
  /**
   * Returns the current application configuration as a JSON object.
   *
   * ```js
   * Neutralino.app.getConfig ()
   * ```
   */
  "Neutralino.app.getConfig": {
    responses: {
      /** Application configuration */
      200: {
        content: {
          "application/json": {
            /** Unique string to identify your application. Eg: `js.neutralino.sample` */
            applicationId: string;
            /** Mode of the application. Accepted values are `window`, `browser`, and `cloud`. */
            defaultMode: "window" | "browser" | "cloud";
            /** The port of your application. If the value is `0`, Neutralinojs will use a random available port. */
            port: number;
            /**
             * The entry URL of the application. Neutralinojs will initially load this URL.
             * This property accepts both relative and absolute URLs.
             */
            url: string;
            /** Enables or disables the background server (The static file server and native API). */
            enableHTTPServer: boolean;
            /**
             * Enables or disables the native API. For better security, this setting should be `false` if you are using a
             * remote URL as your web frontend.
             */
            enableNativeAPI: boolean;
            /** An array of native methods needs to be blocked from the frontend of the application. */
            nativeBlockList: string[];
            /** A key-value-based JavaScript object of custom [global variables](../developer-environment/global-variables#custom-global-variables). */
            globalVariables: { [key: string]: unknown };
            modes: {
              window: {
                /** Title of the native window. */
                title: string;
                /** Width of the native window. */
                width?: number;
                /** Height of the native window. */
                height?: number;
                /** Maximum width of the native window. */
                maxWidth?: number;
                /** Maximum height of the native window. */
                maxHeight?: number;
                /** Minimum width of the native window. */
                minWidth?: number;
                /** Minimum height of the native window. */
                minHeight?: number;
                /** Activates the full-screen mode. */
                fullScreen?: boolean;
                /** Activates the top-most mode. */
                alwaysOnTop?: boolean;
                /**
                 * Application icon's file name. You can directly point to an image file in the
                 * resources directory. We recommend you to choose a transparent PNG file.
                 */
                icon?: string;
                /** Automatically opens the developer tools window. */
                enableInspector?: boolean;
                /** Activates the borderless mode. */
                borderless?: boolean;
                /** Launches the application maximized. */
                maximize?: boolean;
                /** Make the window invisible. This setting can be used to develop background services. */
                hidden?: boolean;
                /** Make the window resizable or not. The default value is `true`. */
                resizable?: boolean;
              };
              browser: { [key: string]: unknown };
              cloud: { [key: string]: unknown };
            };
            cli: {
              /**
               * Binary file name of your application. If it is `myapp`, all binaries should use
               * `myapp-<platform>` format.
               */
              binaryName: string;
              /** Path of your application resources. */
              resourcesPath: string;
              /** Filename of the Neutralinojs JavaScript library. */
              clientLibrary: string;
              /** Neutralinojs server version. neu CLI adds this property when the project is scaffolded. */
              binaryVersion?: string;
              /** Neutralinojs client version. neu CLI adds this property when the project is scaffolded. */
              clientVersion?: string;
            };
          };
        };
      };
    };
  };
  /**
   * The keepAlive method is responsible for saving the Neutralinojs server instance from the automatic termination.
   * This method is called automatically from the client library for the browser mode.
   *
   * ```js
   * Neutralino.app.keepAlive();
   * ```
   */
  "Neutralino.app.keepAlive": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success?: boolean;
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Kills the application process.
   * If the application becomes unresponsive, you can use this to terminate the process instantly.
   * However, we recommend you to use the `exit()` method to close your application properly.
   *
   * ```js
   * await Neutralino.app.killProcess();
   * ```
   */
  "Neutralino.app.killProcess": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /**
   * Provides physical memory details (in megabytes).
   *
   * ```js
   * let ramInfo = await Neutralino.computer.getRamUsage();
   * console.log(`Your ram size: ${Math.round(ramInfo.total / 1000000)}GB`);
   * ```
   */
  "Neutralino.computer.getMemoryInfo": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: string;
            returnValue: {
              /** Total physical memory. */
              total: number;
              /** Available physical memory. */
              available: number;
            };
          };
        };
      };
    };
  };
  /**
   * Writes messages to `neutralino.log` file.
   *
   * :::tip
   * If your application is running via `neu run` or `neu listen`, you can see log
   * messages on your terminal.
   * :::
   *
   * ```js
   * await Neutralino.debug.log({
   *   type: 'INFO',
   *   message: 'Test message'
   * });
   * ```
   */
  "Neutralino.debug.log": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: string;
            message: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Type of the message. Accepted values are `INFO`, `WARN`, and `ERROR`. */
          type: "INFO" | "WARN" | "ERROR";
          /** Content to be logged. */
          message: string;
        };
      };
    };
  };
  /**
   * Creates a new directory.
   *
   * ```js
   * await Neutralino.filesystem.createDirectory({
   *   path: './newDirectory',
   * });
   * ```
   */
  "Neutralino.filesystem.createDirectory": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | {
                success: boolean;
                message: string;
              }
            | {
                error: string;
              };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** New directory path. */
          path?: string;
        };
      };
    };
  };
  /**
   * Removes given directories.
   *
   * ```js
   * await Neutralino.filesystem.removeDirectory({
   *   path: './tmpDirectory',
   * });
   * ```
   */
  "Neutralino.filesystem.removeDirectory": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Writes new text files with data.
   *
   * ```js
   * await Neutralino.filesystem.writeFile({
   *   fileName: './myFile.txt',
   *   data: 'Sample content'
   * });
   * ```
   */
  "Neutralino.filesystem.writeFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Writes new binary files with data.
   *
   * ```js
   * let rawBin = new ArrayBuffer(1);
   * let view = new Uint8Array(rawBin);
   * view[0] = 64; // Saves ASCII '@' to the binary file
   * await Neutralino.filesystem.writeBinaryFile({
   *   fileName: './myFile.bin',
   *   data: rawBin
   * });
   * ```
   */
  "Neutralino.filesystem.writeBinaryFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Reads text files.
   *
   * ```js
   * let response = await Neutralino.filesystem.readFile({
   *   fileName: './myFile.txt'
   * });
   * console.log(`Content: ${response.data}`);
   * ```
   */
  "Neutralino.filesystem.readFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Reads binary files.
   *
   * ```js
   * let response = await Neutralino.filesystem.readBinaryFile({
   *   fileName: './myFile.bin'
   * });
   * let view = new Uint8Array(response.data);
   * console.log('Binary content: ', view);
   * ```
   */
  "Neutralino.filesystem.readBinaryFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Removes given file.
   *
   * ```js
   * await Neutralino.filesystem.removeFile({
   *   fileName: './myFile.txt'
   * });
   * ```
   */
  "Neutralino.filesystem.removeFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Reads a whole directory.
   *
   * ```js
   * let response = await Neutralino.filesystem.readDirectory({
   *   path: NL_PATH
   * });
   * console.log('Content: ', response.entries);
   * ```
   */
  "Neutralino.filesystem.readDirectory": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Copies a file to a new destination.
   *
   * ```js
   * await Neutralino.filesystem.copyFile({
   *   source: './source.txt',
   *   destination: './destination.txt'
   * });
   * ```
   */
  "Neutralino.filesystem.copyFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Moves a file to a new destination.
   *
   * ```js
   * await Neutralino.filesystem.moveFile({
   *   source: './source.txt',
   *   destination: './destination.txt'
   * });
   * ```
   */
  "Neutralino.filesystem.moveFile": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Returns file statistics for the given path. If the given path doesn't exist or is unable to access,
   * the awaited method will throw an error. Therefore, you can use this method to check the existance of a file or directory.
   *
   * ```js
   * let response = await Neutralino.filesystem.getStats({
   *   path: './sampleVideo.mp4'
   * });
   * console.log('Stats:', response);
   * ```
   */
  "Neutralino.filesystem.getStats": {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Executes a command and returns the output.
   *
   * ```js
   * Neutralino.os.execCommand ({
   *   command: 'python --version'
   * })
   * ```
   */
  "Neutralino.os.execCommand": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
            /** String data taken from the both standard output (STDOUT) and standard error (STDERR) streams of the command's process. */
            output: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The command needs to be executed. */
          command: string;
          shouldRunInBackground?: boolean;
        };
      };
    };
  };
  /**
   * Provides the value of a given environment variable.
   *
   * ```js
   * Neutralino.os.getEnvar('USER')
   *   .then (response => `USER = ${response.value}`);
   * ```
   */
  "Neutralino.os.getEnvar": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
            /** Value of the given environment variable. */
            returnValue: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the environment variable. */
          key: string;
        };
      };
    };
  };
  /**
   * Shows the file open dialog.
   *
   * ```js
   * let response = await Neutralino.os.showDialogOpen({
   *   title: 'Select a folder',
   *   isDirectoryMode: true
   * });
   * console.log(`You've selected: ${response.selectedEntry}`);
   * ```
   */
  "Neutralino.os.showOpenDialog": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
            /** The selected value (a folder or directory). */
            returnValue: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Title of the dialog. */
          title: string;
          /** A boolean value to allow directories to be selected. The default value is `false`. */
          isDirectoryMode?: boolean;
          /** An array of file extensions to filter the file list.  Eg: `filter: ['js', 'ts', '*']`. */
          filter?: string[];
        };
      };
    };
  };
  /**
   * Shows the file save dialog.
   *
   * ```js
   * let response = await Neutralino.os.showSaveDialog({
   *   title: 'Save to a file'
   * });
   * console.log(`You've selected: ${response.selectedEntry}`);
   * ```
   */
  "Neutralino.os.showSaveDialog": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
            /** The selected value (a folder or directory). */
            returnValue: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Title of the dialog. */
          title: string;
        };
      };
    };
  };
  /**
   * Displays a notification message.
   * ```js
   * await Neutralino.os.showNotification({
   *   summary: 'Hello world',
   *   body: 'It works!. Have a nice day'
   * });
   * ```
   */
  "Neutralino.os.showNotification": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Title of the dialog. */
          title: string;
          /** Content of the notification. */
          content: string;
        };
      };
    };
  };
  /** Displays a message box. */
  "Neutralino.os.showMessageBox": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Title of the message box. */
          title?: string;
          /** Content of the message box. */
          content?: string;
          /** Message box type. Accepted values are `WARN`, `ERROR`, `INFO`, and `QUESTION`. */
          type?: "WARN" | "ERROR" | "INFO" | "QUESTION";
        };
      };
    };
  };
  /**
   * Creates/updates the tray icon and menu.
   * ```js
   * let tray = {
   *   icon: '/resources/icons/trayIcon.png',
   *   menuItems: [
   *     {id: "about", text: "About"},
   *     {text: "-"},
   *     {id: "quit", text: "Quit"}
   *   ]
   * };
   * await Neutralino.os.setTray(tray);
   * ```
   */
  "Neutralino.os.setTray": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          icon?: string;
          menu?: {
            /** Label of the menu item. This field is a mandatory field. Use `-` (hyphen) character for a menu separator. */
            text: string;
            /** A unique identifier for each menu item. */
            id?: string;
            /** A boolean flag to disable/enable a specific menu item. */
            isDisabled?: boolean;
            /** A boolean flag to mark a specific menu item as selected. */
            isChecked?: boolean;
          }[];
        };
      };
    };
  };
  /**
   * Opens a URL with the default web browser.
   * :::tip If your application is running on the default web browser, this method will open a new tab. :::
   */
  open: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** URL to be opened (required). */
          url: string;
        };
      };
    };
  };
  /**
   * Writes data into Neutralinojs shared storage.
   *
   * ```js
   * await Neutralino.storage.putData({
   *   bucket: 'userDetails',
   *   data: JSON.stringify({
   *     username: 'TestValue'
   *   })
   * });
   * ```
   */
  "Neutralino.storage.setData": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | {
                success: boolean;
              }
            | {
                error: string;
              };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** A key to indentify data. */
          key?: string;
          /**
           * Data as a string. If this value is `null` or `undefined`,
           * the specific data record will be erased from the disk.
           */
          data?: string;
        };
      };
    };
  };
  /**
   * Reads and returns data for a given Neutralinojs shared storage key.
   * ```js
   * let response = await Neutralino.storage.getData({
   *   bucket: 'userDetails'
   * });
   * console.log(`Data: ${response.data}`);
   * ```
   */
  "Neutralino.storage.getData": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | {
                success: boolean;
                returnValue: {
                  /** Data string of the storage record. */
                  data?: string;
                };
              }
            | {
                error: string;
              };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The key of the storage data record. */
          key?: string;
        };
      };
    };
  };
  /**
   * Sets the title of the native window.
   *
   * ```js
   * Neutralino.window.setTitle ('My window')
   * ```
   */
  "Neutrlino.window.setTitle": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Title of the window as a string. */
          title: string;
        };
      };
    };
  };
  /**
   * Resize the native window. \
   * This feature is suitable to make custom window bars along with the [borderless mode](https://neutralino.js.org/docs/configuration/neutralino.config.json#modeswindowborderless-boolean).
   *
   * This method always expects width and height couples. \
   * For example, if you are sending `minWidth`, you should send `minHeight` too.
   * ```js
   * Neutralino.window.setSize({
   *     width: 500,
   *     height: 200,
   *     maxWidth: 600,
   *     maxHeight: 400
   * });
   * ```
   *
   * ```js
   * Neutralino.window.setSize({
   *     resizable: false
   * });
   * ```
   */
  neutralino_window_post_size: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Window width in pixels. */
          width?: number;
          /** Window height in pixels. */
          height?: number;
          /** Minimum width of the window in pixels. */
          minWidth?: number;
          /** Minimum height of the window in pixels. */
          minHeight?: number;
          /** Maximum width of the window in pixels. */
          maxWidth?: number;
          /** Maximum height of the window in pixels. */
          maxHeight?: number;
          /** A boolean value to make the window resizable or fixed. */
          resizable?: number;
        };
      };
    };
  };
  /** Sets an icon for the native window or Dock. */
  "Neutralino.window.setIcon": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Path of the icon. A `200x200` PNG image file works fine on all supported operating systems. */
          icon: string;
        };
      };
    };
  };
  /** Focuses the native window. */
  "Neutralino.window.focus": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Hides the native window. */
  "Neutralino.window.hide": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Returns true if the native window is visible. */
  "Neutralino.window.isVisible": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /** Shows the native window. */
  "Neutralino.window.show": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Minimizes the native window. */
  "Neutralino.window.minimize": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Maximizes the native window. */
  "Neutralino.window.maximize": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Returns true if the native window is maximized. */
  "Neutralino.window.isMaximized": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /** Restores the native window. */
  "Neutralino.window.unmaximize": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Enables the full screen mode. */
  "Neutralino.window.setFullScreen": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /** Returns true if the native window is in the full screen mode. */
  "Neutralino.window.isFullScreen": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success?: boolean;
            returnValue?: boolean;
          };
        };
      };
    };
  };
  /** Exits from the full screen mode. */
  "Neutralino.window.exitFullScreen": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
  };
  /**
   * Moves the native window into given coordinates. \
   * Neutralinojs's cross-platform coordinate system starts from top-left corner of the screen.
   * In other words, `x=0,y=0` point refers to the top-left corner of the device's main screen.
   */
  "Neutralino.window.move": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** Always true */
            success: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** A integer value for the horizontal position. */
          x: number;
          /** A integer value for the vertical position. */
          y: number;
        };
      };
    };
  };
}

export interface external {}
