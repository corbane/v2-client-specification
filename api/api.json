{
  "openapi": "3.0.2",
  "info": {
    "title": "Neutralino API",
    "version": "1.5.0"
  },
  "servers": [
    {
      "url": "http://localhost:{NL_PORT}",
      "description": "Neutralino server",
      "variables": {
        "NL_PORT": {
          "description": "Application port",
          "default": "65097"
        }
      }
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "paths": {
    "/__nativeMethod_app.exit": {
      "post": {
        "summary": "exit",
        "operationId": "Neutralino.app.exit",
        "tags": [
          "App"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ExitRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AlwaysSuccessResponse"
          }
        },
        "description": "Terminates the running application.\n<!--\ntype: tab\ntitle: JS\n-->\n```js\nawait Neutralino.app.exit();\n\nawait Neutralino.app.exit(130);\n```\n<!--\ntype: tab\ntitle: Test\n-->\n```json\n```\n<button onClick=\"alert('---')\">Tokyo</button>\n<script>\nvar e = \"\"\n</script>\n<!-- type: tab-end -->"
      }
    },
    "/__nativeMethod_app.getConfig": {
      "get": {
        "summary": "getConfig",
        "operationId": "Neutralino.app.getConfig",
        "tags": [
          "App"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetConfigResponse"
          }
        },
        "description": "Returns the current application configuration as a JSON object.\n<!--\ntype: tab\ntitle: JS\n-->\n```js\nawait Neutralino.app.getConfig();\n```\n<!-- type: tab-end -->",
        "x-note": "maxWidth, maxHeight, binaryVersion and clientVersion not found in default neutralino.config.json"
      }
    },
    "/__nativeMethod_app.keepAlive": {
      "get": {
        "summary": "keepAlive",
        "operationId": "Neutralino.app.keepAlive",
        "tags": [
          "App"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/KeepAliveResponse"
          }
        },
        "description": "The keepAlive method is responsible for saving the Neutralinojs server instance from the automatic termination.\nThis method is called automatically from the client library for the browser mode.\n<!--\ntype: tab\ntitle: JS\n-->\n```js\nawait Neutralino.app.keepAlive();\n```\n<!-- type: tab-end -->"
      }
    },
    "/__nativeMethod_app.killProcess": {
      "get": {
        "summary": "killProcess",
        "operationId": "Neutralino.app.killProcess",
        "tags": [
          "App"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AlwaysSuccessResponse"
          }
        },
        "description": "Kills the application process.\nIf the application becomes unresponsive, you can use this to terminate the process instantly.\nHowever, we recommend you to use the `exit()` method to close your application properly.\n<!--\ntype: tab\ntitle: JS\n-->\n```js\nawait Neutralino.app.killProcess();\n```\n<!-- type: tab-end -->"
      }
    },
    "/__nativeMethod_computer.getMemoryInfo": {
      "get": {
        "summary": "computer.getMemoryInfo",
        "operationId": "Neutralino.computer.getMemoryInfo",
        "tags": [
          "Computer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetMemoryInfoResponse"
          }
        },
        "description": "Provides physical memory details (in megabytes).\n\n```js\nlet ramInfo = await Neutralino.computer.getRamUsage();\nconsole.log(`Your ram size: ${Math.round(ramInfo.total / 1000000)}GB`);\n```"
      }
    },
    "/__nativeMethod_debug.log": {
      "post": {
        "summary": "log",
        "operationId": "Neutralino.debug.log",
        "tags": [
          "Debug"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LogRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogResponse"
          }
        },
        "description": "Writes messages to `neutralino.log` file. \n\n:::tip\nIf your application is running via `neu run` or `neu listen`, you can see log\nmessages on your terminal.\n:::\n\n```js\nawait Neutralino.debug.log({\n  type: 'INFO',\n  message: 'Test message'\n});\n```"
      }
    },
    "/__nativeMethod_os.execCommand": {
      "post": {
        "operationId": "Neutralino.os.execCommand",
        "summary": "execCommand",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ExecCommandRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExecCommandResponse"
          }
        },
        "description": "Executes a command and returns the output.\n\n```js\nlet response = await Neutralino.os.execCommand({\n  command: 'python --version'\n});\nconsole.log(`Your Python version: ${response.output}`);\n```"
      }
    },
    "/__nativeMethod_os.getEnvar": {
      "post": {
        "summary": "getEnvar",
        "operationId": "Neutralino.os.getEnvar",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GetEnvarRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetEnvarResponse"
          }
        },
        "description": "Provides the value of a given environment variable.\n\n```js\nlet response = await Neutralino.os.getEnvar({\n  key: 'USER'\n});\nconsole.log(`USER = ${response.value}`);\n```"
      }
    },
    "/__nativeMethod_os.showOpenDialog": {
      "post": {
        "summary": "showOpenDialog",
        "operationId": "Neutralino.os.showOpenDialog",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DialogOpenRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DialogOpenResponse"
          }
        },
        "description": "Shows the file open dialog.\n\n```js\nlet response = await Neutralino.os.showDialogOpen({\n  title: 'Select a folder',\n  isDirectoryMode: true\n});\nconsole.log(`You've selected: ${response.selectedEntry}`);\n```"
      }
    },
    "/__nativeMethod_os.showSaveDialog": {
      "post": {
        "summary": "showSaveDialog",
        "operationId": "Neutralino.os.showSaveDialog",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShowSaveDialogRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowSaveDialogResponse"
          }
        },
        "description": "Shows the file save dialog.\n\n```js\nlet response = await Neutralino.os.showSaveDialog({\n  title: 'Save to a file'\n});\nconsole.log(`You've selected: ${response.selectedEntry}`);\n```"
      }
    },
    "/__nativeMethod_os.showNotification": {
      "post": {
        "summary": "showNotification",
        "operationId": "Neutralino.os.showNotification",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShowNotificationRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowNotificationResponse"
          }
        },
        "description": "Displays a notification message.\n```js\nawait Neutralino.os.showNotification({\n  summary: 'Hello world',\n  body: 'It works!. Have a nice day'\n});\n```"
      }
    },
    "/__nativeMethod_os.showMessageBox": {
      "post": {
        "summary": "showMessageBox",
        "operationId": "Neutralino.os.showMessageBox",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShowMessageBoxRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowMessageBoxResponse"
          }
        },
        "description": "Displays a message box."
      }
    },
    "/__nativeMethod_os.setTray": {
      "post": {
        "summary": "setTray",
        "operationId": "Neutralino.os.setTray",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetTrayRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SetTrayResponse"
          }
        },
        "description": "Creates/updates the tray icon and menu.\n```js\nlet tray = {\n  icon: '/resources/icons/trayIcon.png',\n  menuItems: [\n    {id: \"about\", text: \"About\"},\n    {text: \"-\"},\n    {id: \"quit\", text: \"Quit\"}\n  ]\n};\nawait Neutralino.os.setTray(tray);\n```"
      }
    },
    "/__nativeMethod_os.open": {
      "post": {
        "operationId": "open",
        "summary": "Neutralino.os.open",
        "tags": [
          "OS"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OpenRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OpenResponse"
          }
        },
        "description": "Opens a URL with the default web browser.\n:::tip If your application is running on the default web browser, this method will open a new tab. :::"
      }
    },
    "/__nativeMethod_storage.setData": {
      "post": {
        "summary": "setData",
        "operationId": "Neutralino.storage.setData",
        "tags": [
          "Storage"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetDataRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SetDataResponse"
          }
        },
        "description": "Writes data into Neutralinojs shared storage. \n\n```js\nawait Neutralino.storage.putData({\n  bucket: 'userDetails',\n  data: JSON.stringify({\n    username: 'TestValue'\n  })\n});\n```"
      }
    },
    "/__nativeMethod_storage.getData": {
      "post": {
        "summary": "getData",
        "operationId": "Neutralino.storage.getData",
        "tags": [
          "Storage"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GetDataRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetDataResponse"
          }
        },
        "description": "Reads and returns data for a given Neutralinojs shared storage key. \n```js\nlet response = await Neutralino.storage.getData({\n  bucket: 'userDetails'\n});\nconsole.log(`Data: ${response.data}`);\n```\n"
      }
    },
    "/__nativeMethod_window.setTitle": {
      "post": {
        "summary": "setTitle",
        "operationId": "Neutrlino.window.setTitle",
        "description": "Sets the title of the native window.",
        "tags": [
          "Window"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetTitleRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "JS",
            "source": "Neutralino.window.setTitle('New title')"
          }
        ]
      }
    },
    "/__nativeMethod_window.setSize": {
      "post": {
        "summary": "setSize",
        "operationId": "neutralino_window_post_size",
        "description": "Resize the native window. \\\nThis feature is suitable to make custom window bars along with the [borderless mode](https://neutralino.js.org/docs/configuration/neutralino.config.json#modeswindowborderless-boolean).\n\nThis method always expects width and height couples. \\\nFor example, if you are sending `minWidth`, you should send `minHeight` too.\n```js\nawait Neutralino.window.setSize({\n    width: 500,\n    height: 200,\n    maxWidth: 600,\n    maxHeight: 400\n});\n\nawait Neutralino.window.setSize({\n    resizable: false\n});\n```\n",
        "tags": [
          "Window"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetSizeRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.setIcon": {
      "post": {
        "summary": "setIcon",
        "operationId": "Neutralino.window.setIcon",
        "description": "Sets an icon for the native window or Dock.",
        "tags": [
          "Window"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SetIconRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        },
        "x-doc": "const icon = '/resources/icons/appIcon.png'; await Neutralino.window.setIcon(icon);"
      }
    },
    "/__nativeMethod_window.focus": {
      "get": {
        "summary": "focus",
        "operationId": "Neutralino.window.focus",
        "description": "Focuses the native window.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.hide": {
      "get": {
        "summary": "hide",
        "operationId": "Neutralino.window.hide",
        "description": "Hides the native window.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.isVisible": {
      "get": {
        "summary": "isVisible",
        "operationId": "Neutralino.window.isVisible",
        "description": "Returns true if the native window is visible.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IsVisibleResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.show": {
      "get": {
        "summary": "show",
        "operationId": "Neutralino.window.show",
        "description": "Shows the native window.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.minimize": {
      "get": {
        "summary": "minimize",
        "operationId": "Neutralino.window.minimize",
        "description": "Minimizes the native window.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.maximize": {
      "get": {
        "summary": "maximize",
        "operationId": "Neutralino.window.maximize",
        "description": "Maximizes the native window.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.isMaximized": {
      "get": {
        "summary": "isMaximized",
        "operationId": "Neutralino.window.isMaximized",
        "description": "Returns true if the native window is maximized.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IsMaximizedResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.unmaximize": {
      "get": {
        "summary": "unmaximize",
        "operationId": "Neutralino.window.unmaximize",
        "description": "Restores the native window.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.setFullScreen": {
      "get": {
        "summary": "setFullScreen",
        "operationId": "Neutralino.window.setFullScreen",
        "description": "Enables the full screen mode.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.isFullScreen": {
      "get": {
        "summary": "isFullScreen",
        "operationId": "Neutralino.window.isFullScreen",
        "description": "Returns true if the native window is in the full screen mode.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IsFullScreenResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.exitFullScreen": {
      "get": {
        "summary": "exitFullScreen",
        "operationId": "Neutralino.window.exitFullScreen",
        "description": "Exits from the full screen mode.",
        "tags": [
          "Window"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    },
    "/__nativeMethod_window.move": {
      "post": {
        "summary": "move",
        "operationId": "Neutralino.window.move",
        "description": "Moves the native window into given coordinates. \\\nNeutralinojs's cross-platform coordinate system starts from top-left corner of the screen.\nIn other words, `x=0,y=0` point refers to the top-left corner of the device's main screen.\n",
        "tags": [
          "Window"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MoveRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "requestBodies": {
      "ExitRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "ExitQuery",
              "type": "object",
              "properties": {
                "exitCode": {
                  "type": "integer",
                  "description": "An integer value for the process's exit code. The default value is always `0` (success)."
                }
              }
            }
          }
        }
      },
      "LogRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LogOptions"
            }
          }
        }
      },
      "ExecCommandRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExecCommandOptions"
            }
          }
        }
      },
      "GetEnvarRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEnvarOptions"
            }
          }
        }
      },
      "DialogOpenRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DialogOpenOptions"
            }
          }
        }
      },
      "ShowSaveDialogRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShowSaveDialogOptions"
            }
          }
        }
      },
      "ShowNotificationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShowNotificationOptions"
            }
          }
        }
      },
      "ShowMessageBoxRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShowMessageBoxOptions"
            }
          }
        }
      },
      "SetTrayRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SetTrayOptions"
            }
          }
        }
      },
      "OpenRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OpenOptions"
            }
          }
        }
      },
      "SetDataRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SetDataOptions"
            }
          }
        }
      },
      "GetDataRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetDataOptions"
            }
          }
        }
      },
      "SetTitleRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "SetTitleQuery",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the window as a string."
                }
              },
              "required": [
                "title"
              ]
            },
            "examples": {
              "default": {
                "value": {
                  "title": "New title"
                }
              }
            }
          }
        }
      },
      "SetSizeRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "SetSizeQuery",
              "type": "object",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "Window width in pixels."
                },
                "height": {
                  "type": "number",
                  "description": "Window height in pixels."
                },
                "minWidth": {
                  "type": "number",
                  "description": "Minimum width of the window in pixels."
                },
                "minHeight": {
                  "type": "number",
                  "description": "Minimum height of the window in pixels."
                },
                "maxWidth": {
                  "type": "number",
                  "description": "Maximum width of the window in pixels."
                },
                "maxHeight": {
                  "type": "number",
                  "description": "Maximum height of the window in pixels."
                },
                "resizable": {
                  "type": "number",
                  "description": "A boolean value to make the window resizable or fixed."
                }
              }
            }
          }
        }
      },
      "SetIconRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "SetIconQuery",
              "type": "object",
              "properties": {
                "icon": {
                  "type": "string",
                  "description": "Path of the icon. A `200x200` PNG image file works fine on all supported operating systems."
                }
              },
              "required": [
                "icon"
              ]
            }
          }
        }
      },
      "MoveRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "A integer value for the horizontal position."
                },
                "y": {
                  "type": "number",
                  "description": "A integer value for the vertical position."
                }
              },
              "required": [
                "x",
                "y"
              ]
            }
          }
        }
      }
    },
    "responses": {
      "AlwaysSuccessResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true,
                  "description": "Always true"
                }
              },
              "required": [
                "success"
              ]
            }
          }
        }
      },
      "GetConfigResponse": {
        "description": "Application configuration",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "./models/neutralino.config.schema.yaml"
            }
          }
        }
      },
      "KeepAliveResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "GetMemoryInfoResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "string"
                },
                "returnValue": {
                  "$ref": "#/components/schemas/GetMemoryInfoResult"
                }
              },
              "required": [
                "success",
                "returnValue"
              ]
            }
          }
        }
      },
      "LogResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LogResult"
            }
          }
        }
      },
      "ExecCommandResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "output": {
                  "$ref": "#/components/schemas/ExecCommandResult"
                }
              },
              "required": [
                "success",
                "output"
              ]
            }
          }
        }
      },
      "GetEnvarResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "returnValue": {
                  "$ref": "#/components/schemas/GetEnvarResult"
                }
              },
              "required": [
                "success",
                "returnValue"
              ]
            }
          }
        }
      },
      "DialogOpenResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "returnValue": {
                  "$ref": "#/components/schemas/DialogOpenResult"
                }
              },
              "required": [
                "success",
                "returnValue"
              ]
            }
          }
        }
      },
      "ShowSaveDialogResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "returnValue": {
                  "$ref": "#/components/schemas/ShowSaveDialogResult"
                }
              },
              "required": [
                "success",
                "returnValue"
              ]
            }
          }
        }
      },
      "ShowNotificationResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ]
            }
          }
        }
      },
      "ShowMessageBoxResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ]
            }
          }
        }
      },
      "SetTrayResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ]
            }
          }
        }
      },
      "OpenResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "required": [
                "success"
              ]
            }
          }
        }
      },
      "SetDataResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "oneOf": [
                {
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                },
                {
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              ]
            }
          }
        }
      },
      "GetDataResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "oneOf": [
                {
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "returnValue": {
                      "$ref": "#/components/schemas/GetDataResult"
                    }
                  },
                  "required": [
                    "success",
                    "returnValue"
                  ]
                },
                {
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              ]
            }
          }
        }
      },
      "SuccessResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true,
                  "description": "Always true"
                }
              },
              "required": [
                "success"
              ]
            }
          }
        }
      },
      "IsMaximizedResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "boolean"
            }
          }
        }
      },
      "IsFullScreenResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "returnValue": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "IsVisibleResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "IsVisibleReturnValue",
              "type": "boolean"
            }
          }
        }
      }
    },
    "schemas": {
      "GetMemoryInfoResult": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total physical memory."
          },
          "available": {
            "type": "number",
            "description": "Available physical memory."
          }
        },
        "required": [
          "total",
          "available"
        ]
      },
      "LogOptions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "INFO",
              "WARN",
              "ERROR"
            ],
            "description": "Type of the message. Accepted values are `INFO`, `WARN`, and `ERROR`."
          },
          "message": {
            "type": "string",
            "description": "Content to be logged."
          }
        },
        "required": [
          "type",
          "message"
        ]
      },
      "LogResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ExecCommandOptions": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The command needs to be executed."
          },
          "shouldRunInBackground": {
            "type": "boolean"
          }
        },
        "required": [
          "command"
        ],
        "example": {
          "command": "python --version"
        }
      },
      "ExecCommandResult": {
        "type": "string",
        "description": "String data taken from the both standard output (STDOUT) and standard error (STDERR) streams of the command's process."
      },
      "GetEnvarOptions": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The name of the environment variable."
          }
        },
        "required": [
          "key"
        ],
        "example": {
          "key": "USER"
        }
      },
      "GetEnvarResult": {
        "type": "string",
        "description": "Value of the given environment variable."
      },
      "DialogOpenOptions": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the dialog."
          },
          "isDirectoryMode": {
            "type": "boolean",
            "description": "A boolean value to allow directories to be selected. The default value is `false`."
          },
          "filter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of file extensions to filter the file list.  Eg: `filter: ['js', 'ts', '*']`."
          }
        },
        "required": [
          "title"
        ],
        "example": {
          "title": "Select a folder",
          "isDirectoryMode": true
        }
      },
      "DialogOpenResult": {
        "type": "string",
        "description": "The selected value (a folder or directory)."
      },
      "ShowSaveDialogOptions": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the dialog."
          }
        },
        "required": [
          "title"
        ],
        "example": {
          "title": "Save to a file"
        }
      },
      "ShowSaveDialogResult": {
        "type": "string",
        "description": "The selected value (a folder or directory)."
      },
      "ShowNotificationOptions": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the dialog."
          },
          "content": {
            "type": "string",
            "description": "Content of the notification."
          }
        },
        "required": [
          "title",
          "content"
        ],
        "example": {
          "type": "Hello world",
          "content": "It works!. Have a nice day"
        }
      },
      "ShowMessageBoxOptions": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the message box.",
            "example": "Save to a file"
          },
          "content": {
            "type": "string",
            "description": "Content of the message box."
          },
          "type": {
            "type": "string",
            "enum": [
              "WARN",
              "ERROR",
              "INFO",
              "QUESTION"
            ],
            "description": "Message box type. Accepted values are `WARN`, `ERROR`, `INFO`, and `QUESTION`.",
            "example": "INFO"
          }
        }
      },
      "SetTrayOptions": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string"
          },
          "menu": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetTrayItemOptions"
            }
          }
        },
        "x-examples": {
          "example": {
            "icon": "/resources/icons/trayIcon.png",
            "menuItems": [
              {
                "id": "about",
                "text": "About"
              },
              {
                "text": "-"
              },
              {
                "id": "quit",
                "text": "Quit"
              }
            ]
          }
        }
      },
      "SetTrayItemOptions": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Label of the menu item. This field is a mandatory field. Use `-` (hyphen) character for a menu separator."
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for each menu item."
          },
          "isDisabled": {
            "type": "boolean",
            "description": "A boolean flag to disable/enable a specific menu item."
          },
          "isChecked": {
            "type": "boolean",
            "description": "A boolean flag to mark a specific menu item as selected."
          }
        },
        "required": [
          "text"
        ]
      },
      "OpenOptions": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to be opened (required)."
          }
        },
        "required": [
          "url"
        ],
        "x-examples": {
          "example": {
            "url": "https://neutralino.js.org"
          }
        }
      },
      "SetDataOptions": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "A key to indentify data."
          },
          "data": {
            "type": "string",
            "description": "Data as a string. If this value is `null` or `undefined`,\nthe specific data record will be erased from the disk."
          }
        }
      },
      "GetDataOptions": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the storage data record."
          }
        }
      },
      "GetDataResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Data string of the storage record."
          }
        }
      }
    }
  }
}